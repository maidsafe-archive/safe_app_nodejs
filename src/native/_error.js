
const CODE_MAP = {}

function makeError(code, name) {
  function E(message) {
    if (!Error.captureStackTrace)
      this.stack = (new Error()).stack;
    else
      Error.captureStackTrace(this, this.constructor);
    this.message = message;
  }
  E.prototype = new Error();
  E.prototype.name = name;
  E.prototype.code = code;
  E.prototype.constructor = E;
  CODE_MAP[code] = E;
  return E;
}

const ERR_ENCODE_DECODE_ERROR = makeError(-1, "ERR_ENCODE_DECODE_ERROR");
const ERR_ASYMMETRIC_DECIPHER_FAILURE = makeError(-2, "ERR_ASYMMETRIC_DECIPHER_FAILURE");
const ERR_SYMMETRIC_DECIPHER_FAILURE = makeError(-3, "ERR_SYMMETRIC_DECIPHER_FAILURE");
const ERR_RECEIVED_UNEXPECTED_DATA = makeError(-4, "ERR_RECEIVED_UNEXPECTED_DATA");
const ERR_RECEIVED_UNEXPECTED_EVENT = makeError(-5, "ERR_RECEIVED_UNEXPECTED_EVENT");
const ERR_VERSION_CACHE_MISS = makeError(-6, "ERR_VERSION_CACHE_MISS");
const ERR_ROOT_DIRECTORY_EXISTS = makeError(-7, "ERR_ROOT_DIRECTORY_EXISTS");
const ERR_RANDOM_DATA_GENERATION_FAILURE = makeError(-8, "ERR_RANDOM_DATA_GENERATION_FAILURE");
const ERR_OPERATION_FORBIDDEN = makeError(-9, "ERR_OPERATION_FORBIDDEN");
const ERR_ROUTING_ERROR = makeError(-10, "ERR_ROUTING_ERROR");
const ERR_ROUTING_INTERFACE_ERROR = makeError(-11, "ERR_ROUTING_INTERFACE_ERROR");
const ERR_UNSUPPORTED_SALT_SIZE_FOR_PW_HASH = makeError(-12, "ERR_UNSUPPORTED_SALT_SIZE_FOR_PW_HASH");
const ERR_UNSUCCESSFUL_PW_HASH = makeError(-13, "ERR_UNSUCCESSFUL_PW_HASH");
const ERR_OPERATION_ABORTED = makeError(-14, "ERR_OPERATION_ABORTED");
const ERR_MPID_MESSAGING_ERROR = makeError(-15, "ERR_MPID_MESSAGING_ERROR");
const ERR_SELF_ENCRYPTION = makeError(-16, "ERR_SELF_ENCRYPTION");
const ERR_REQUEST_TIMEOUT = makeError(-17, "ERR_REQUEST_TIMEOUT");

    // routing Client errors
const ERR_ACCESS_DENIED = makeError(-100, "ERR_ACCESS_DENIED");
const ERR_NO_SUCH_ACCOUNT = makeError(-101, "ERR_NO_SUCH_ACCOUNT");
const ERR_ACCOUNT_EXISTS = makeError(-102, "ERR_ACCOUNT_EXISTS");
const ERR_NO_SUCH_DATA = makeError(-103, "ERR_NO_SUCH_DATA");
const ERR_DATA_EXISTS = makeError(-104, "ERR_DATA_EXISTS");
const ERR_DATA_TOO_LARGE = makeError(-105, "ERR_DATA_TOO_LARGE");
const ERR_NO_SUCH_ENTRY = makeError(-106, "ERR_NO_SUCH_ENTRY");
const ERR_ENTRY_EXISTS = makeError(-107, "ERR_ENTRY_EXISTS");
const ERR_TOO_MANY_ENTRIES = makeError(-108, "ERR_TOO_MANY_ENTRIES");
const ERR_NO_SUCH_KEY = makeError(-109, "ERR_NO_SUCH_KEY");
const ERR_INVALID_OWNERS = makeError(-110, "ERR_INVALID_OWNERS");
const ERR_INVALID_SUCCESSOR = makeError(-111, "ERR_INVALID_SUCCESSOR");
const ERR_INVALID_OPERATION = makeError(-112, "ERR_INVALID_OPERATION");
const ERR_LOW_BALANCE = makeError(-113, "ERR_LOW_BALANCE");
const ERR_NETWORK_FULL = makeError(-114, "ERR_NETWORK_FULL");
const ERR_NETWORK_OTHER = makeError(-115, "ERR_NETWORK_OTHER");

    // IPC errors.
const ERR_AUTH_DENIED = makeError(-200, "ERR_AUTH_DENIED");
const ERR_CONTAINERS_DENIED = makeError(-201, "ERR_CONTAINERS_DENIED");
const ERR_INVALID_MSG = makeError(-202, "ERR_INVALID_MSG");
const ERR_ALREADY_AUTHORISED = makeError(-203, "ERR_ALREADY_AUTHORISED");
const ERR_UNKNOWN_APP = makeError(-204, "ERR_UNKNOWN_APP");

    // NFS errors.
const ERR_DIRECTORY_EXISTS = makeError(-300, "ERR_DIRECTORY_EXISTS");
const ERR_DESTINATION_AND_SOURCE_ARE_SAME = makeError(-301, "ERR_DESTINATION_AND_SOURCE_ARE_SAME");
const ERR_DIRECTORY_NOT_FOUND = makeError(-302, "ERR_DIRECTORY_NOT_FOUND");
const ERR_FILE_EXISTS = makeError(-303, "ERR_FILE_EXISTS");
const ERR_FILE_DOES_NOT_MATCH = makeError(-304, "ERR_FILE_DOES_NOT_MATCH");
const ERR_FILE_NOT_FOUND = makeError(-305, "ERR_FILE_NOT_FOUND");
const ERR_INVALID_RANGE = makeError(-306, "ERR_INVALID_RANGE");
const ERR_INVALID_PARAMETER = makeError(-307, "ERR_INVALID_PARAMETER");

    // App errors
const ERR_NO_SUCH_CONTAINER = makeError(-1002, "ERR_NO_SUCH_CONTAINER");
const ERR_INVALID_CIPHER_OPT_HANDLE = makeError(-1003, "ERR_INVALID_CIPHER_OPT_HANDLE");
const ERR_INVALID_ENCRYPT_KEY_HANDLE = makeError(-1004, "ERR_INVALID_ENCRYPT_KEY_HANDLE");
const ERR_INVALID_MDATA_INFO_HANDLE = makeError(-1005, "ERR_INVALID_MDATA_INFO_HANDLE");
const ERR_INVALID_MDATA_ENTRIES_HANDLE = makeError(-1006, "ERR_INVALID_MDATA_ENTRIES_HANDLE");
const ERR_INVALID_MDATA_ENTRY_ACTIONS_HANDLE = makeError(-1007, "ERR_INVALID_MDATA_ENTRY_ACTIONS_HANDLE");
const ERR_INVALID_MDATA_PERMISSIONS_HANDLE = makeError(-1008, "ERR_INVALID_MDATA_PERMISSIONS_HANDLE");
const ERR_INVALID_MDATA_PERMISSION_SET_HANDLE = makeError(-1009, "ERR_INVALID_MDATA_PERMISSION_SET_HANDLE");
const ERR_INVALID_SELF_ENCRYPTOR_HANDLE = makeError(-1010, "ERR_INVALID_SELF_ENCRYPTOR_HANDLE");
const ERR_INVALID_SIGN_KEY_HANDLE = makeError(-1011, "ERR_INVALID_SIGN_KEY_HANDLE");
const ERR_INVALID_SELF_ENCRYPTOR_READ_OFFSETS = makeError(-1012, "ERR_INVALID_SELF_ENCRYPTOR_READ_OFFSETS");
const ERR_IO_ERROR = makeError(-1013, "ERR_IO_ERROR");

const ERR_UNEXPECTED = makeError(-2000, "ERR_UNEXPECTED");

const UnknownFfiError = makeError(0, "UnknownFfiError");

module.exports = function(code, msg) {
  let cls = CODE_MAP[code] || UnknownFfiError;
  return new cls(msg);
}
